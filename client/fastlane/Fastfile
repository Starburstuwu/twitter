# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

project_name = "AmneziaVPN"
project_scheme = "AmneziaVPN"
project_identifier = "org.amnezia.AmneziaVPN"
itunes_username = "admin@amnezia.org"

before_all do
    ENV['GYM_SCHEME'] = project_scheme
end

default_platform :ios

desc "Load AppStore Connect APIKey for using in lanes"
lane :load_api_key do
  app_store_connect_api_key(
    key_id: ENV['APPSTORE_CONNECT_KEY_ID'],
    issuer_id: ENV['APPSTORE_CONNECT_ISSUER_ID'],
    key_content: ENV['APPSTORE_CONNECT_PRIVATE_KEY'],
    is_key_content_base64: false,
    in_house: false
  )
end

desc "Increase build number based on most recent TestFlight existing one"
lane :fetch_and_increment_build_version do
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  api_key = lane_context[SharedValues::APPSTORE_CONNECT_PRIVATE_KEY]
  
  current_version = get_version_number(
    target: project_name
  )

  latest_build_version = latest_testflight_build_number(
    api_key: api_key,
    version: current_version,
    app_identifier: app_identifier
  )

  increment_build_number(
    build_number: (latest_build_version + 1)
  )
end

desc "Set up signing identities: install certificates in keychain and download provisioning profiles"
lane :setup_signing_identities do
  team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
  api_key = lane_context[SharedValues::APPSTORE_CONNECT_PRIVATE_KEY]
  
  keychain_name = "signing"
  keycahin_password = "temporary_password"
  
  delete_keychain(
    name: keychain_name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

  create_keychain(
    name: keychain_name,
    password: keycahin_password,
    default_keychain: true,
    unlock: true,
    timeout: 3600
  )

  import_certifcate(
    certificate_path: ENV['IOS_DIST_SIGNING_KEY_FILE_PATH'],
    certificate_passwotd: ENV['IOS_DIST_SIGNING_KEY_PASSWORD'],
    keychain_name: keychain_name,
    keycahin_password: keycahin_password
  )

  sigh(
    adhoc: options[:adhoc],
    api_key: api_key,
    readonly: true
  )
end


desc "build app for release (TestFlight)"
lane :build_release do |options|
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  app_extension_identfier = "org.amnezia.AmneziaVPN.network-extension"
  
  profile_name = "match AppStore org.amnezia.AmneziaVPN" # TODO: replace with the proper profile later
  ext_profile_name = "match AppStore org.amnezia.AmneziaVPN.network-extension" # TODO: replace with the proper profile later
  
  output_name = "#{project_name}-iOS"
  export_method = "app-store"
  
  update_code_signing_settings(
    path: File.expand_path("../build-ios/AmneziaVPN.xcodeproj/"),
    use_automatic_signing: false,
    targets: [project_name],
    code_sign_identity: "Apple Distribution", # TODO: replace with proper one
    bundle_identifier: app_identifier,
    profile_name: profile_name,
    build_configurations: ["Release"]
  )

  gym(
    scheme: project_scheme,
    output_name: output_name,
    configuration: "Release",
    export_options: {
      method: export_method,
      provisioningProfiles: {
        app_identifier => profile_name,
        app_extension_identfier => ext_profile_name
      }
    }
  )
end

desc "Upload to TestFlight via AppStore Connect"
lane :upload_release_to_testflight do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
  deliver(
    api_key: api_key,
    skip_screenshots: true,
    skip_metadata: true,
    skip_app_version_update: true,
    force: true,
    run_precheck_before_submit: false
  )
end

desc "Build release and upload to TestFlight"
lane :build_and_upload_to_testflight do
  load_api_key
  setup_signing_identities
  fetch_and_increment_build_version
  build_release
  upload_release_to_testflight
end
